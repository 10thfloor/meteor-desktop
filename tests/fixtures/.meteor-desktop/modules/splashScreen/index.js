var Browser = require('electron').BrowserWindow;
var path = require('path');
var fs = require('fs');

/**
 * Implements simple splashscreen for Electron.
 *
 * @param {Object} log
 * @param {Object} app
 * @param {Object} settings
 * @param {Object} systemEvents
 * @constructor
 */
function SplashScreen(log, app, settings, systemEvents) {
    var join = path.join;
    var self = this;

    this.log = log;
    this._settings = settings;
    this._splashHtml = join(__dirname, '..', '..', 'splash.html');
    this._splashHtmlAbsolute = path.resolve(this._splashHtml);
    this._splashHtmlTemplate = join(__dirname, 'splash.html');
    this._opened = false;
    this._fs = fs;

    systemEvents.on('beforeInitialization', function show() {
        if (settings.splashScreen) {
            self._prepare();
        }
        self.show();
    });

    systemEvents.on('beforeLoadingFinished', this.close.bind(this));
    systemEvents.on('startupFailed', this.close.bind(this));
    systemEvents.on('unhandledException', this.close.bind(this));

    this.log.debug('registered event');
}

SplashScreen.prototype._prepare = function _prepare() {
    var splashHTML;
    if (!this._settings.splashScreen) return;

    this.log.info('writing splashscreen');

    splashHTML = this._fs.readFileSync(this._splashHtmlTemplate, 'UTF-8');
    splashHTML = splashHTML.replace('{title}', this._settings.name);
    splashHTML = splashHTML.replace('{splash}', 'splashScreen.png');
    this._fs.writeFileSync(this._splashHtml, splashHTML);

    this.log.info('wrote splashscreen');
};

SplashScreen.prototype.show = function show() {
    var self = this;
    if (!this._settings.splashScreen) return;

    this.log.info('displaying splashscreen from file://' + this._splashHtmlAbsolute);

    this._splashWindow = new Browser({
        width: 1024, height: 768,
        alwaysOnTop: true,
        frame: false,
        transparent: true,
        resizable: false,
        webPreferences: { nodeIntegration: false }
    });

    this._opened = true;

    this._splashWindow.on('closed', function onClosed() {
        self._opened = false;
    });
    this._splashWindow.webContents.closeDevTools();

    this._splashWindow.loadURL('file://' + this._splashHtmlAbsolute);
};

SplashScreen.prototype.close = function close() {
    if (!this._settings.splashScreen) return;
    if (this._opened) {
        this._splashWindow.close();
    }
};

module.exports = SplashScreen;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvc3BsYXNoU2NyZWVuL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksVUFBVSxRQUFRLFVBQVIsRUFBb0IsYUFBbEM7QUFDQSxJQUFJLE9BQU8sUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJLEtBQUssUUFBUSxJQUFSLENBQVQ7Ozs7Ozs7Ozs7O0FBV0EsU0FBUyxZQUFULENBQXNCLEdBQXRCLEVBQTJCLEdBQTNCLEVBQWdDLFFBQWhDLEVBQTBDLFlBQTFDLEVBQXdEO0FBQ3BELFFBQUksT0FBTyxLQUFLLElBQWhCO0FBQ0EsUUFBSSxPQUFPLElBQVg7O0FBRUEsU0FBSyxJQUFMLEdBQVksR0FBWjtBQUNBLFNBQUssU0FBTCxHQUFpQixRQUFqQjtBQUNBLFNBQUssV0FBTCxHQUFtQixLQUFLLFNBQUwsRUFBZ0IsSUFBaEIsRUFBc0IsSUFBdEIsRUFBNEIsYUFBNUIsQ0FBbkI7QUFDQSxTQUFLLG1CQUFMLEdBQTJCLEtBQUssT0FBTCxDQUFhLEtBQUssV0FBbEIsQ0FBM0I7QUFDQSxTQUFLLG1CQUFMLEdBQTJCLEtBQUssU0FBTCxFQUFnQixhQUFoQixDQUEzQjtBQUNBLFNBQUssT0FBTCxHQUFlLEtBQWY7QUFDQSxTQUFLLEdBQUwsR0FBVyxFQUFYOztBQUVBLGlCQUFhLEVBQWIsQ0FBZ0Isc0JBQWhCLEVBQXdDLFNBQVMsSUFBVCxHQUFnQjtBQUNwRCxZQUFJLFNBQVMsWUFBYixFQUEyQjtBQUN2QixpQkFBSyxRQUFMO0FBQ0g7QUFDRCxhQUFLLElBQUw7QUFDSCxLQUxEOztBQU9BLGlCQUFhLEVBQWIsQ0FBZ0IsdUJBQWhCLEVBQXlDLEtBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBekM7QUFDQSxpQkFBYSxFQUFiLENBQWdCLGVBQWhCLEVBQWlDLEtBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBakM7QUFDQSxpQkFBYSxFQUFiLENBQWdCLG9CQUFoQixFQUFzQyxLQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCLElBQWhCLENBQXRDOztBQUVBLFNBQUssSUFBTCxDQUFVLEtBQVYsQ0FBZ0Isa0JBQWhCO0FBQ0g7O0FBRUQsYUFBYSxTQUFiLENBQXVCLFFBQXZCLEdBQWtDLFNBQVMsUUFBVCxHQUFvQjtBQUNsRCxRQUFJLFVBQUo7QUFDQSxRQUFJLENBQUMsS0FBSyxTQUFMLENBQWUsWUFBcEIsRUFBa0M7O0FBRWxDLFNBQUssSUFBTCxDQUFVLElBQVYsQ0FBZSxzQkFBZjs7QUFFQSxpQkFBYSxLQUFLLEdBQUwsQ0FBUyxZQUFULENBQXNCLEtBQUssbUJBQTNCLEVBQWdELE9BQWhELENBQWI7QUFDQSxpQkFBYSxXQUFXLE9BQVgsQ0FBbUIsU0FBbkIsRUFBOEIsS0FBSyxTQUFMLENBQWUsSUFBN0MsQ0FBYjtBQUNBLGlCQUFhLFdBQVcsT0FBWCxDQUFtQixVQUFuQixFQUErQixrQkFBL0IsQ0FBYjtBQUNBLFNBQUssR0FBTCxDQUFTLGFBQVQsQ0FBdUIsS0FBSyxXQUE1QixFQUF5QyxVQUF6Qzs7QUFFQSxTQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUsb0JBQWY7QUFDSCxDQVpEOztBQWNBLGFBQWEsU0FBYixDQUF1QixJQUF2QixHQUE4QixTQUFTLElBQVQsR0FBZ0I7QUFDMUMsUUFBSSxPQUFPLElBQVg7QUFDQSxRQUFJLENBQUMsS0FBSyxTQUFMLENBQWUsWUFBcEIsRUFBa0M7O0FBRWxDLFNBQUssSUFBTCxDQUFVLElBQVYsQ0FBZSx5Q0FBeUMsS0FBSyxtQkFBN0Q7O0FBRUEsU0FBSyxhQUFMLEdBQXFCLElBQUksT0FBSixDQUFZO0FBQzdCLGVBQU8sSUFEc0IsRUFDaEIsUUFBUSxHQURRO0FBRTdCLHFCQUFhLElBRmdCO0FBRzdCLGVBQU8sS0FIc0I7QUFJN0IscUJBQWEsSUFKZ0I7QUFLN0IsbUJBQVcsS0FMa0I7QUFNN0Isd0JBQWdCLEVBQUUsaUJBQWlCLEtBQW5CO0FBTmEsS0FBWixDQUFyQjs7QUFTQSxTQUFLLE9BQUwsR0FBZSxJQUFmOztBQUVBLFNBQUssYUFBTCxDQUFtQixFQUFuQixDQUFzQixRQUF0QixFQUFnQyxTQUFTLFFBQVQsR0FBb0I7QUFDaEQsYUFBSyxPQUFMLEdBQWUsS0FBZjtBQUNILEtBRkQ7QUFHQSxTQUFLLGFBQUwsQ0FBbUIsV0FBbkIsQ0FBK0IsYUFBL0I7O0FBRUEsU0FBSyxhQUFMLENBQW1CLE9BQW5CLENBQTJCLFlBQVksS0FBSyxtQkFBNUM7QUFDSCxDQXZCRDs7QUF5QkEsYUFBYSxTQUFiLENBQXVCLEtBQXZCLEdBQStCLFNBQVMsS0FBVCxHQUFpQjtBQUM1QyxRQUFJLENBQUMsS0FBSyxTQUFMLENBQWUsWUFBcEIsRUFBa0M7QUFDbEMsUUFBSSxLQUFLLE9BQVQsRUFBa0I7QUFDZCxhQUFLLGFBQUwsQ0FBbUIsS0FBbkI7QUFDSDtBQUNKLENBTEQ7O0FBT0EsT0FBTyxPQUFQLEdBQWlCLFlBQWpCIiwiZmlsZSI6Im1vZHVsZXMvc3BsYXNoU2NyZWVuL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEJyb3dzZXIgPSByZXF1aXJlKCdlbGVjdHJvbicpLkJyb3dzZXJXaW5kb3c7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbi8qKlxuICogSW1wbGVtZW50cyBzaW1wbGUgc3BsYXNoc2NyZWVuIGZvciBFbGVjdHJvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbG9nXG4gKiBAcGFyYW0ge09iamVjdH0gYXBwXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeXN0ZW1FdmVudHNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTcGxhc2hTY3JlZW4obG9nLCBhcHAsIHNldHRpbmdzLCBzeXN0ZW1FdmVudHMpIHtcbiAgICB2YXIgam9pbiA9IHBhdGguam9pbjtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLl9sb2cgPSBsb2c7XG4gICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICB0aGlzLl9zcGxhc2hIdG1sID0gam9pbihfX2Rpcm5hbWUsICcuLicsICcuLicsICdzcGxhc2guaHRtbCcpO1xuICAgIHRoaXMuX3NwbGFzaEh0bWxBYnNvbHV0ZSA9IHBhdGgucmVzb2x2ZSh0aGlzLl9zcGxhc2hIdG1sKTtcbiAgICB0aGlzLl9zcGxhc2hIdG1sVGVtcGxhdGUgPSBqb2luKF9fZGlybmFtZSwgJ3NwbGFzaC5odG1sJyk7XG4gICAgdGhpcy5fb3BlbmVkID0gZmFsc2U7XG4gICAgdGhpcy5fZnMgPSBmcztcblxuICAgIHN5c3RlbUV2ZW50cy5vbignYmVmb3JlSW5pdGlhbGl6YXRpb24nLCBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICBpZiAoc2V0dGluZ3Muc3BsYXNoU2NyZWVuKSB7XG4gICAgICAgICAgICBzZWxmLl9wcmVwYXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5zaG93KCk7XG4gICAgfSk7XG5cbiAgICBzeXN0ZW1FdmVudHMub24oJ2JlZm9yZUxvYWRpbmdGaW5pc2hlZCcsIHRoaXMuY2xvc2UuYmluZCh0aGlzKSk7XG4gICAgc3lzdGVtRXZlbnRzLm9uKCdzdGFydHVwRmFpbGVkJywgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKTtcbiAgICBzeXN0ZW1FdmVudHMub24oJ3VuaGFuZGxlZEV4Y2VwdGlvbicsIHRoaXMuY2xvc2UuYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLl9sb2cuZGVidWcoJ3JlZ2lzdGVyZWQgZXZlbnQnKTtcbn1cblxuU3BsYXNoU2NyZWVuLnByb3RvdHlwZS5fcHJlcGFyZSA9IGZ1bmN0aW9uIF9wcmVwYXJlKCkge1xuICAgIHZhciBzcGxhc2hIVE1MO1xuICAgIGlmICghdGhpcy5fc2V0dGluZ3Muc3BsYXNoU2NyZWVuKSByZXR1cm47XG5cbiAgICB0aGlzLl9sb2cuaW5mbygnd3JpdGluZyBzcGxhc2hzY3JlZW4nKTtcblxuICAgIHNwbGFzaEhUTUwgPSB0aGlzLl9mcy5yZWFkRmlsZVN5bmModGhpcy5fc3BsYXNoSHRtbFRlbXBsYXRlLCAnVVRGLTgnKTtcbiAgICBzcGxhc2hIVE1MID0gc3BsYXNoSFRNTC5yZXBsYWNlKCd7dGl0bGV9JywgdGhpcy5fc2V0dGluZ3MubmFtZSk7XG4gICAgc3BsYXNoSFRNTCA9IHNwbGFzaEhUTUwucmVwbGFjZSgne3NwbGFzaH0nLCAnc3BsYXNoU2NyZWVuLnBuZycpO1xuICAgIHRoaXMuX2ZzLndyaXRlRmlsZVN5bmModGhpcy5fc3BsYXNoSHRtbCwgc3BsYXNoSFRNTCk7XG5cbiAgICB0aGlzLl9sb2cuaW5mbygnd3JvdGUgc3BsYXNoc2NyZWVuJyk7XG59O1xuXG5TcGxhc2hTY3JlZW4ucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoIXRoaXMuX3NldHRpbmdzLnNwbGFzaFNjcmVlbikgcmV0dXJuO1xuXG4gICAgdGhpcy5fbG9nLmluZm8oJ2Rpc3BsYXlpbmcgc3BsYXNoc2NyZWVuIGZyb20gZmlsZTovLycgKyB0aGlzLl9zcGxhc2hIdG1sQWJzb2x1dGUpO1xuXG4gICAgdGhpcy5fc3BsYXNoV2luZG93ID0gbmV3IEJyb3dzZXIoe1xuICAgICAgICB3aWR0aDogMTAyNCwgaGVpZ2h0OiA3NjgsXG4gICAgICAgIGFsd2F5c09uVG9wOiB0cnVlLFxuICAgICAgICBmcmFtZTogZmFsc2UsXG4gICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICByZXNpemFibGU6IGZhbHNlLFxuICAgICAgICB3ZWJQcmVmZXJlbmNlczogeyBub2RlSW50ZWdyYXRpb246IGZhbHNlIH1cbiAgICB9KTtcblxuICAgIHRoaXMuX29wZW5lZCA9IHRydWU7XG5cbiAgICB0aGlzLl9zcGxhc2hXaW5kb3cub24oJ2Nsb3NlZCcsIGZ1bmN0aW9uIG9uQ2xvc2VkKCkge1xuICAgICAgICBzZWxmLl9vcGVuZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICB0aGlzLl9zcGxhc2hXaW5kb3cud2ViQ29udGVudHMuY2xvc2VEZXZUb29scygpO1xuXG4gICAgdGhpcy5fc3BsYXNoV2luZG93LmxvYWRVUkwoJ2ZpbGU6Ly8nICsgdGhpcy5fc3BsYXNoSHRtbEFic29sdXRlKTtcbn07XG5cblNwbGFzaFNjcmVlbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuX3NldHRpbmdzLnNwbGFzaFNjcmVlbikgcmV0dXJuO1xuICAgIGlmICh0aGlzLl9vcGVuZWQpIHtcbiAgICAgICAgdGhpcy5fc3BsYXNoV2luZG93LmNsb3NlKCk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTcGxhc2hTY3JlZW47XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
